#!/usr/bin/env php
<?php

require __DIR__.'/vendor/autoload.php';

use AlgoliaSearch\Client;
use Contao\PackageMetaDataIndexer\Command\IndexCommand;
use Contao\PackageMetaDataIndexer\MetaDataRepository;
use Contao\PackageMetaDataIndexer\Package\Factory;
use Contao\PackageMetaDataIndexer\Packagist;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\HttpClient\CachingHttpClient;
use Symfony\Component\HttpClient\HttpClient;
use Symfony\Component\HttpKernel\HttpCache\Store;

ini_set('display_errors', '1');
ini_set('display_startup_errors', '1');
error_reporting(E_ALL);

$output = new ConsoleOutput();

$store = new Store(__DIR__.'/cache/http');
$httpClient = HttpClient::create();
$httpClient = new CachingHttpClient($httpClient, $store, [/*'trace_level' => 'full'*/]);

$packagist = new Packagist($output, $httpClient);
$metadataRepository = new MetaDataRepository(dirname(__DIR__).'/meta');
$packageFactory = new Factory($metadataRepository, $packagist);
$algoliaClient = new Client($_SERVER['ALGOLIA_APP_ID'], $_SERVER['ALGOLIA_API_KEY']);
$command = new IndexCommand($packagist, $packageFactory, $algoliaClient, $metadataRepository);

$application = new Application();
$application->add($command);
$application->setDefaultCommand($command->getName(), true);
$application->run(null, $output);
